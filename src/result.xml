<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.83"/>
    <errors>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always false" verbose="Condition &apos;fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/netbase.h" line="119" info="Condition &apos;fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/netbase.h" line="119" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always true" verbose="Condition &apos;fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/netbase.h" line="119" info="Condition &apos;fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/netbase.h" line="119" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always false" verbose="Condition &apos;fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/protocol.h" line="83" info="Condition &apos;fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/protocol.h" line="83" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always true" verbose="Condition &apos;fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/protocol.h" line="83" info="Condition &apos;fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/protocol.h" line="83" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fWrite&apos; is always false" verbose="Condition &apos;fWrite&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/addrman.h" line="248" info="Condition &apos;fWrite&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/addrman.h" line="248" info="Assignment &apos;fWrite=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fWrite&apos; is always true" verbose="Condition &apos;fWrite&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/addrman.h" line="248" info="Condition &apos;fWrite&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/addrman.h" line="248" info="Assignment &apos;fWrite=true&apos;, assigned value is 1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/protocol.h" line="83"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/addrman.h" line="48"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float* to char* is not portable due to different binary data representations on different platforms." verbose="Casting from float* to char* is not portable due to different binary data representations on different platforms." cwe="704" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="133"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from double* to char* is not portable due to different binary data representations on different platforms." verbose="Casting from double* to char* is not portable due to different binary data representations on different platforms." cwe="704" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="134"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float* to char* is not portable due to different binary data representations on different platforms." verbose="Casting from float* to char* is not portable due to different binary data representations on different platforms." cwe="704" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="147"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from double* to char* is not portable due to different binary data representations on different platforms." verbose="Casting from double* to char* is not portable due to different binary data representations on different platforms." cwe="704" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="148"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/netbase.h" line="81"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/netbase.h" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/protocol.h" line="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/protocol.h" line="83"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/protocol.h" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/addrman.h" line="48"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="182"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="199"/>
        </error>
        <error id="gmtimeCalled" severity="portability" msg="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;." verbose="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;." cwe="477">
            <location file="/opt/Ideal-dev/src/util.h" line="353"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CDataStream::operator[]&apos; can be const." verbose="The member function &apos;CDataStream::operator[]&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="809"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CDataStream::exceptions&apos; can be const." verbose="The member function &apos;CDataStream::exceptions&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="909"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CDataStream::in_avail&apos; can be const." verbose="The member function &apos;CDataStream::in_avail&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="912"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CDataStream::GetType&apos; can be const." verbose="The member function &apos;CDataStream::GetType&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="915"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CDataStream::GetVersion&apos; can be const." verbose="The member function &apos;CDataStream::GetVersion&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="917"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CAutoFile::operator!&apos; can be const." verbose="The member function &apos;CAutoFile::operator!&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="1058"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CAutoFile::exceptions&apos; can be const." verbose="The member function &apos;CAutoFile::exceptions&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="1074"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CAutoFile::GetType&apos; can be const." verbose="The member function &apos;CAutoFile::GetType&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="1078"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CAutoFile::GetVersion&apos; can be const." verbose="The member function &apos;CAutoFile::GetVersion&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/serialize.h" line="1080"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CSemaphoreGrant::operatorbool&apos; can be const." verbose="The member function &apos;CSemaphoreGrant::operatorbool&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/sync.h" line="256"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CAddrMan::size&apos; can be const." verbose="The member function &apos;CAddrMan::size&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/addrman.h" line="393"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;base_uint &lt; 160 &gt;::operator++&apos; can be const." verbose="The member function &apos;base_uint &lt; 160 &gt;::operator++&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/uint256.h" line="187"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;base_uint &lt; 160 &gt;::operator--&apos; can be const." verbose="The member function &apos;base_uint &lt; 160 &gt;::operator--&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/uint256.h" line="204"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;base_uint &lt; 256 &gt;::operator++&apos; can be const." verbose="The member function &apos;base_uint &lt; 256 &gt;::operator++&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/uint256.h" line="187"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;base_uint &lt; 256 &gt;::operator--&apos; can be const." verbose="The member function &apos;base_uint &lt; 256 &gt;::operator--&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/uint256.h" line="204"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/netbase.h" line="40"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/netbase.h" line="74"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/netbase.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/netbase.h" line="117"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="412"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="425"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="527"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="540"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CSemaphore&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CSemaphore&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/sync.h" line="180"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LockedPageManagerBase &lt; MemoryPageLocker &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LockedPageManagerBase &lt; MemoryPageLocker &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/allocators.h" line="48"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/alert.cpp" line="160"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/alert.h" line="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/alert.h" line="79"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/key.h" line="76"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always false" verbose="Condition &apos;fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/main.h" line="854" info="Condition &apos;fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/main.h" line="854" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always true" verbose="Condition &apos;fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/main.h" line="854" info="Condition &apos;fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/main.h" line="854" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always false" verbose="Condition &apos;fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/main.h" line="1347" info="Condition &apos;fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/main.h" line="1347" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always true" verbose="Condition &apos;fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/main.h" line="1347" info="Condition &apos;fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/main.h" line="1347" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="730"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/checkpoints.cpp" line="368"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/checkpoints.h" line="71"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/checkpoints.h" line="115"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/crypter.h" line="43"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Params.h" line="54"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Params.h" line="138"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Params.h" line="203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Coin.h" line="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Coin.h" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Commitment.h" line="48"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Commitment.h" line="91"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/Accumulator.h" line="86"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/AccumulatorProofOfKnowledge.h" line="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/SerialNumberSignatureOfKnowledge.h" line="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/SpendMetaData.h" line="44"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/zerocoin/CoinSpend.h" line="81"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="172"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="229"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="292"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="365"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="460"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="730"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="777"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="854"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="1347"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/main.h" line="1455"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CRequestTracker::IsNull&apos; can be const." verbose="The member function &apos;CRequestTracker::IsNull&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/net.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CKeyID&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CKeyID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/key.h" line="52"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CScriptID&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CScriptID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/key.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPubKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPubKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/key.h" line="71"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mruset &lt; CAddress &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mruset &lt; CAddress &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/mruset.h" line="26"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mruset &lt; CInv &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mruset &lt; CInv &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/mruset.h" line="26"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;addrIn&apos; should be passed by reference." verbose="Parameter &apos;addrIn&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/net.h" line="252"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PublicCoin::denomination&apos; is not initialized in the constructor." verbose="Member variable &apos;PublicCoin::denomination&apos; is not initialized in the constructor." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/Coin.h" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor." verbose="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/Accumulator.h" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor." verbose="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/Accumulator.h" line="35"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CoinSpend::params&apos; is not initialized in the constructor." verbose="Member variable &apos;CoinSpend::params&apos; is not initialized in the constructor." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/CoinSpend.h" line="35"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vchOtherDerivationParameters&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vchOtherDerivationParameters&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/crypter.h" line="57"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hash&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hash&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="228"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;prevout&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;prevout&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="280"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scriptSig&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scriptSig&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="281"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;prevout&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;prevout&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="287"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scriptPubKey&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scriptPubKey&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="362"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="773"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nChainTrust&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nChainTrust&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1148"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashProof&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashProof&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1154"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nChainTrust&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nChainTrust&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1173"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashProof&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashProof&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1179"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashPrev&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashPrev&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1336"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashNext&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashNext&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1337"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;blockHash&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;blockHash&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1338"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashPrev&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashPrev&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1343"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vHave&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vHave&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1452"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CAutoBN_CTX::operator!&apos; can be const." verbose="The member function &apos;CAutoBN_CTX::operator!&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/bignum.h" line="52"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CTxOut::IsNull&apos; can be const." verbose="The member function &apos;CTxOut::IsNull&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/main.h" line="377"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CTransaction::ReadFromDisk&apos; can be const." verbose="The member function &apos;CTransaction::ReadFromDisk&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/main.h" line="578"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CTxIndex::IsNull&apos; can be const." verbose="The member function &apos;CTxIndex::IsNull&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/main.h" line="791"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CBlockLocator::IsNull&apos; can be const." verbose="The member function &apos;CBlockLocator::IsNull&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/main.h" line="1467"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="88"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="91"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="92"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="93"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="94"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="96"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/bignum.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CMasterKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CMasterKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/crypter.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PublicCoin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PublicCoin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/Coin.h" line="42"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AccumulatorProofOfKnowledge&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AccumulatorProofOfKnowledge&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/AccumulatorProofOfKnowledge.h" line="23"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SerialNumberSignatureOfKnowledge&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SerialNumberSignatureOfKnowledge&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/zerocoin/SerialNumberSignatureOfKnowledge.h" line="36"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CMerkleTx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CMerkleTx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="717"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBlockLocator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBlockLocator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/main.h" line="1450"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CTxDB&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CTxDB&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/txdb-leveldb.h" line="33"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;secure_allocator &lt; unsigned char &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;secure_allocator &lt; unsigned char &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/allocators.h" line="198"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;strPrivKey&apos; should be passed by reference." verbose="Parameter &apos;strPrivKey&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/checkpoints.cpp" line="289"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;str&apos;" verbose="Reading from empty STL container &apos;str&apos;" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/script.h" line="226"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nSize" verbose="Uninitialized variable: nSize" cwe="908">
            <location file="/opt/Ideal-dev/src/script.h" line="463"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/opt/Ideal-dev/src/allocators.h" line="127"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/opt/Ideal-dev/src/util.h" line="641"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fEraseUnencryptedKey&apos; is always true" verbose="Condition &apos;fEraseUnencryptedKey&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/walletdb.h" line="105" info="Condition &apos;fEraseUnencryptedKey&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/walletdb.h" line="98" info="Assignment &apos;fEraseUnencryptedKey=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always false" verbose="Condition &apos;fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Condition &apos;fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!fRead&apos; is always true" verbose="Condition &apos;!fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Condition &apos;!fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always true" verbose="Condition &apos;fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Condition &apos;fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!fRead&apos; is always false" verbose="Condition &apos;!fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Condition &apos;!fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="456" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!fRead&apos; is always true" verbose="Condition &apos;!fRead&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/wallet.h" line="837" info="Condition &apos;!fRead&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="837" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fRead&apos; is always false" verbose="Condition &apos;fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/wallet.h" line="837" info="Condition &apos;fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="837" info="Assignment &apos;fRead=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!fRead&apos; is always false" verbose="Condition &apos;!fRead&apos; is always false" cwe="570">
            <location file="/opt/Ideal-dev/src/wallet.h" line="837" info="Condition &apos;!fRead&apos; is always false"/>
            <location file="/opt/Ideal-dev/src/wallet.h" line="837" info="Assignment &apos;fRead=true&apos;, assigned value is 1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="456"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/opt/Ideal-dev/src/bitcoinrpc.cpp" line="969"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/walletdb.h" line="43"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/wallet.h" line="58"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/wallet.h" line="456"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/wallet.h" line="763"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/wallet.h" line="797"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used." cwe="563">
            <location file="/opt/Ideal-dev/src/wallet.h" line="837"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="637"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="639"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="641"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="643"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="645"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="647"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="688"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="690"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="692"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="694"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="697"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="699"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="701"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="706"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="708"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;vArg&apos; should be passed by reference." verbose="Parameter &apos;vArg&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/uint256.h" line="631"/>
        </error>
        <error id="gmtimeCalled" severity="portability" msg="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;." verbose="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;." cwe="477">
            <location file="/opt/Ideal-dev/src/bitcoinrpc.cpp" line="348"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CAccountingEntry::nEntryNo&apos; is not initialized in the constructor." verbose="Member variable &apos;CAccountingEntry::nEntryNo&apos; is not initialized in the constructor." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="822"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CDBEnv::IsMock&apos; can be const." verbose="The member function &apos;CDBEnv::IsMock&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/db.h" line="52"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CWallet::CanSupportFeature&apos; can be const." verbose="The member function &apos;CWallet::CanSupportFeature&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/wallet.h" line="135"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CWallet::GetKeyPoolSize&apos; can be const." verbose="The member function &apos;CWallet::GetKeyPoolSize&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/wallet.h" line="302"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CWallet::GetVersion&apos; can be const." verbose="The member function &apos;CWallet::GetVersion&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/wallet.h" line="319"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CWalletTx::MarkDirty&apos; can be const." verbose="The member function &apos;CWalletTx::MarkDirty&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/wallet.h" line="534"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CRPCTable::execute&apos; can be static." verbose="The member function &apos;CRPCTable::execute&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" cwe="398" inconclusive="true">
            <location file="/opt/Ideal-dev/src/bitcoinrpc.h" line="121"/>
            <location file="/opt/Ideal-dev/src/bitcoinrpc.cpp" line="1056"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddressVisitor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddressVisitor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/base58.h" line="268"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/base58.h" line="334"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/base58.h" line="339"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/base58.h" line="344"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CKeyMetadata&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CKeyMetadata&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/walletdb.h" line="37"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CKeyPool&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CKeyPool&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="52"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CWallet&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CWallet&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="107"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CReserveKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CReserveKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="343"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CWalletTx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CWalletTx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="418"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CWalletKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CWalletKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="757"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Semantic_actions&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Semantic_actions&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_reader_template.h" line="206"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Json_grammer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Json_grammer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_reader_template.h" line="376"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;definition&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;definition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_reader_template.h" line="416"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Multi_pass_iters&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Multi_pass_iters&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_reader_template.h" line="583"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="42"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="43"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="44"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="45"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="47"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="48"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="49"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;json_spirit :: Value_impl &lt; json_spirit :: Config_vector &lt; std :: string &gt; &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/json/json_spirit_value.h" line="50"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;secure_allocator &lt; char &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;secure_allocator &lt; char &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/opt/Ideal-dev/src/allocators.h" line="198"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;strFilename&apos; should be passed by reference." verbose="Parameter &apos;strFilename&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/walletdb.h" line="62"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;strWalletFileIn&apos; should be passed by reference." verbose="Parameter &apos;strWalletFileIn&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/wallet.h" line="107"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;strName&apos; should be passed by reference." verbose="Parameter &apos;strName&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/bitcoinrpc.cpp" line="117"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;strName&apos; should be passed by reference." verbose="Parameter &apos;strName&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="/opt/Ideal-dev/src/bitcoinrpc.cpp" line="134"/>
        </error>
        <error id="stlcstrParam" severity="performance" msg="Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant." verbose="The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly passing the string." cwe="704">
            <location file="/opt/Ideal-dev/src/bitcoinrpc.cpp" line="434"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fOk&apos; is always true" verbose="Condition &apos;fOk&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/crypter.cpp" line="78" info="Condition &apos;fOk&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/crypter.cpp" line="75" info="Assignment &apos;fOk=true&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;fOk&apos; is always true" verbose="Condition &apos;fOk&apos; is always true" cwe="571">
            <location file="/opt/Ideal-dev/src/crypter.cpp" line="105" info="Condition &apos;fOk&apos; is always true"/>
            <location file="/opt/Ideal-dev/src/crypter.cpp" line="102" info="Assignment &apos;fOk=true&apos;, assigned value is 1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DB_LOG_AUTO_REMOVE&apos; since the value of &apos;DB_LOG_AUTO_REMOVE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DB_LOG_AUTO_REMOVE&apos; since the value of &apos;DB_LOG_AUTO_REMOVE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/opt/Ideal-dev/src/db.cpp" line="96"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DB_LOG_IN_MEMORY&apos; since the value of &apos;DB_LOG_IN_MEMORY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DB_LOG_IN_MEMORY&apos; since the value of &apos;DB_LOG_IN_MEMORY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/opt/Ideal-dev/src/db.cpp" line="134"/>
        </error>
