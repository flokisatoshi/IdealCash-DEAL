<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.72"/>
    <errors>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="addrman.h" line="54"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="alert.cpp" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nSerSize&apos; can be reduced." verbose="The scope of the variable &apos;nSerSize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="key.h" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nSerSize&apos; can be reduced." verbose="The scope of the variable &apos;nSerSize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addrman.h" line="54"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used.">
            <location file="key.h" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used.">
            <location file="addrman.h" line="54"/>
        </error>
        <error id="pointerOutOfBounds" severity="portability" msg="Undefined behaviour, pointer arithmetic &apos;pn+20&apos; is out of bounds." verbose="Undefined behaviour, pointer arithmetic &apos;pn+20&apos; is out of bounds. From chapter 6.5.6 in the C specification:\012&quot;When an expression that has integer type is added to or subtracted from a pointer, ..&quot; and then &quot;If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.&quot;">
            <location file="uint256.h" line="322"/>
        </error>
        <error id="pointerOutOfBounds" severity="portability" msg="Undefined behaviour, pointer arithmetic &apos;pn+32&apos; is out of bounds." verbose="Undefined behaviour, pointer arithmetic &apos;pn+32&apos; is out of bounds. From chapter 6.5.6 in the C specification:\012&quot;When an expression that has integer type is added to or subtracted from a pointer, ..&quot; and then &quot;If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.&quot;">
            <location file="uint256.h" line="322"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="uint256.h" line="183"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="uint256.h" line="200"/>
        </error>
        <error id="gmtimeCalled" severity="portability" msg="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;." verbose="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;.">
            <location file="util.h" line="353"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;CAddrMan&apos; does not have a constructor." verbose="The class &apos;CAddrMan&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="addrman.h" line="165"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="uint256.h" line="413"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint160&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="uint256.h" line="426"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="uint256.h" line="528"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;uint256&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="uint256.h" line="541"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="netbase.h" line="40"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CNetAddr&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="netbase.h" line="74"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="netbase.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CService&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="netbase.h" line="117"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CKeyID&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CKeyID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="key.h" line="52"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CScriptID&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CScriptID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="key.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPubKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPubKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="key.h" line="71"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CSemaphore&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CSemaphore&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="sync.h" line="180"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mruset&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mruset&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="mruset.h" line="26"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mruset&lt;CAddress&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mruset&lt;CAddress&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="mruset.h" line="26"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mruset&lt;CInv&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mruset&lt;CInv&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="mruset.h" line="26"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LockedPageManagerBase&lt;MemoryPageLocker&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LockedPageManagerBase&lt;MemoryPageLocker&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="allocators.h" line="48"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.h" line="433"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="alert.cpp" line="224"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="51"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="155"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="178"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="208"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="423"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="441"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="468"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="addrman.cpp" line="478"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alert.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="alert.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="addrman.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="addrman.cpp" line="1"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="638"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="640"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="642"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="644"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="646"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="648"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="689"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="691"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="693"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="695"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="698"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="700"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="702"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="707"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="uint256.h" line="709"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="checkpoints.cpp" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nSerSize&apos; can be reduced." verbose="The scope of the variable &apos;nSerSize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.h" line="172"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nSerSize&apos; can be reduced." verbose="The scope of the variable &apos;nSerSize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.h" line="229"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used.">
            <location file="main.h" line="172"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nSerSize&apos; is assigned a value that is never used." verbose="Variable &apos;nSerSize&apos; is assigned a value that is never used.">
            <location file="main.h" line="229"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CCrypter::chKey&apos; is not initialized in the constructor." verbose="Member variable &apos;CCrypter::chKey&apos; is not initialized in the constructor.">
            <location file="crypter.h" line="104"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CCrypter::chIV&apos; is not initialized in the constructor." verbose="Member variable &apos;CCrypter::chIV&apos; is not initialized in the constructor.">
            <location file="crypter.h" line="104"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PublicCoin::denomination&apos; is not initialized in the constructor." verbose="Member variable &apos;PublicCoin::denomination&apos; is not initialized in the constructor.">
            <location file="zerocoin/Coin.h" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor." verbose="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor.">
            <location file="zerocoin/Accumulator.h" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor." verbose="Member variable &apos;Accumulator::denomination&apos; is not initialized in the constructor.">
            <location file="zerocoin/Accumulator.h" line="35"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CoinSpend::params&apos; is not initialized in the constructor." verbose="Member variable &apos;CoinSpend::params&apos; is not initialized in the constructor.">
            <location file="zerocoin/CoinSpend.h" line="35"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vchOtherDerivationParameters&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vchOtherDerivationParameters&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="crypter.h" line="57"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hash&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hash&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="228"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;prevout&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;prevout&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="280"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scriptSig&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scriptSig&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="281"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;prevout&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;prevout&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="287"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;scriptPubKey&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;scriptPubKey&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="362"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="773"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nChainTrust&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nChainTrust&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1148"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashProof&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashProof&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1154"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;nChainTrust&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;nChainTrust&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1173"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashProof&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashProof&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1179"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashPrev&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashPrev&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1336"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashNext&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashNext&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1337"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;blockHash&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;blockHash&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1338"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hashPrev&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hashPrev&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1343"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;vHave&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;vHave&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="main.h" line="1452"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="88"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="91"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="92"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="93"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="94"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="96"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBigNum&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="bignum.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CMasterKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CMasterKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="crypter.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PublicCoin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PublicCoin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="zerocoin/Coin.h" line="42"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AccumulatorProofOfKnowledge&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AccumulatorProofOfKnowledge&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="zerocoin/AccumulatorProofOfKnowledge.h" line="23"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SerialNumberSignatureOfKnowledge&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SerialNumberSignatureOfKnowledge&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="zerocoin/SerialNumberSignatureOfKnowledge.h" line="36"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CMerkleTx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CMerkleTx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="main.h" line="717"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBlockLocator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBlockLocator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="main.h" line="1450"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CTxDB&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CTxDB&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="txdb-leveldb.h" line="33"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;rhs&apos; should be passed by reference." verbose="Parameter &apos;rhs&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="zerocoin/Accumulator.h" line="84"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;coin&apos; should be passed by reference." verbose="Parameter &apos;coin&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="zerocoin/Accumulator.h" line="114"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;msghash&apos; should be passed by reference." verbose="Parameter &apos;msghash&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="zerocoin/SerialNumberSignatureOfKnowledge.h" line="51"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nSize" verbose="Uninitialized variable: nSize">
            <location file="script.h" line="463"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="keystore.h" line="77"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="keystore.h" line="174"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="checkpoints.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="checkpoints.cpp" line="1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="bitcoinrpc.cpp" line="969"/>
        </error>
        <error id="gmtimeCalled" severity="portability" msg="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;." verbose="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;.">
            <location file="bitcoinrpc.cpp" line="348"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CAccountingEntry::nEntryNo&apos; is not initialized in the constructor." verbose="Member variable &apos;CAccountingEntry::nEntryNo&apos; is not initialized in the constructor.">
            <location file="wallet.h" line="822"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="251"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="251"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="267"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="267"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="275"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="275"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::type_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="283"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not initialized in the constructor.">
            <location file="json/json_spirit_value.h" line="283"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Value_impl::type_&apos; is not assigned a value in &apos;Value_impl::operator=&apos;." verbose="Member variable &apos;Value_impl::type_&apos; is not assigned a value in &apos;Value_impl::operator=&apos;.">
            <location file="json/json_spirit_value.h" line="299"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Value_impl::is_uint64_&apos; is not assigned a value in &apos;Value_impl::operator=&apos;." verbose="Member variable &apos;Value_impl::is_uint64_&apos; is not assigned a value in &apos;Value_impl::operator=&apos;.">
            <location file="json/json_spirit_value.h" line="299"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddressVisitor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddressVisitor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="base58.h" line="268"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="base58.h" line="334"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="base58.h" line="339"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CBitcoinAddress&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="base58.h" line="344"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CKeyMetadata&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CKeyMetadata&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="walletdb.h" line="37"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CKeyPool&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CKeyPool&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="wallet.h" line="52"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CWallet&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CWallet&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="wallet.h" line="107"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CReserveKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CReserveKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="wallet.h" line="343"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CWalletTx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CWalletTx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="wallet.h" line="418"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CWalletKey&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CWalletKey&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="wallet.h" line="757"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="42"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="43"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="44"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="45"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="47"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="48"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="49"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value_impl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_value.h" line="50"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Semantic_actions&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Semantic_actions&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_reader_template.h" line="206"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Json_grammer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Json_grammer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_reader_template.h" line="376"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;definition&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;definition&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_reader_template.h" line="416"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Multi_pass_iters&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Multi_pass_iters&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="json/json_spirit_reader_template.h" line="583"/>
        </error>
        <error id="stlcstrParam" severity="performance" msg="Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant." verbose="The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly passing the string.">
            <location file="bitcoinrpc.cpp" line="434"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="crypter.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="crypter.cpp" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="db.cpp" line="236"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="db.cpp" line="465"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DB_LOG_AUTO_REMOVE&apos; since the value of &apos;DB_LOG_AUTO_REMOVE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DB_LOG_AUTO_REMOVE&apos; since the value of &apos;DB_LOG_AUTO_REMOVE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="db.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DB_LOG_IN_MEMORY&apos; since the value of &apos;DB_LOG_IN_MEMORY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DB_LOG_IN_MEMORY&apos; since the value of &apos;DB_LOG_IN_MEMORY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="db.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="db.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="db.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="bitcoinrpc.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="bitcoinrpc.cpp" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;fRet&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;fRet&apos; is reassigned a value before the old one has been used.">
            <location file="init.cpp" line="193"/>
            <location file="init.cpp" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fTaken&apos; can be reduced." verbose="The scope of the variable &apos;fTaken&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="init.cpp" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fBound&apos; can be reduced." verbose="The scope of the variable &apos;fBound&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="init.cpp" line="645"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: strError" verbose="Unused variable: strError">
            <location file="init.cpp" line="648"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="init.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="init.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;USE_UPNP&apos; since the value of &apos;USE_UPNP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;USE_UPNP&apos; since the value of &apos;USE_UPNP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="init.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="irc.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="irc.cpp" line="1"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CKey::fCompressedPubKey&apos; is not initialized in the constructor." verbose="Member variable &apos;CKey::fCompressedPubKey&apos; is not initialized in the constructor.">
            <location file="key.cpp" line="146"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CKey::fCompressedPubKey&apos; is not assigned a value in &apos;CKey::operator=&apos;." verbose="Member variable &apos;CKey::fCompressedPubKey&apos; is not assigned a value in &apos;CKey::operator=&apos;.">
            <location file="key.cpp" line="154"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="key.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="key.cpp" line="1"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="kernel.cpp" line="97"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="kernel.cpp" line="103"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="keystore.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="keystore.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="kernel.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="kernel.cpp" line="1"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;dbname_&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;dbname_&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="leveldb/db/autocompact_test.cc" line="21"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SharedState::total&apos; is not initialized in the constructor." verbose="Member variable &apos;SharedState::total&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_bench.cc" line="290"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SharedState::num_initialized&apos; is not initialized in the constructor." verbose="Member variable &apos;SharedState::num_initialized&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_bench.cc" line="290"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SharedState::num_done&apos; is not initialized in the constructor." verbose="Member variable &apos;SharedState::num_done&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_bench.cc" line="290"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SharedState::start&apos; is not initialized in the constructor." verbose="Member variable &apos;SharedState::start&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_bench.cc" line="290"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ThreadState::shared&apos; is not initialized in the constructor." verbose="Member variable &apos;ThreadState::shared&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_bench.cc" line="300"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ThreadState&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ThreadState&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/db/db_bench.cc" line="300"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Writer::batch&apos; is not initialized in the constructor." verbose="Member variable &apos;Writer::batch&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_impl.cc" line="48"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Writer::sync&apos; is not initialized in the constructor." verbose="Member variable &apos;Writer::sync&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_impl.cc" line="48"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Writer::done&apos; is not initialized in the constructor." verbose="Member variable &apos;Writer::done&apos; is not initialized in the constructor.">
            <location file="leveldb/db/db_impl.cc" line="48"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class DBTest&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class DBTest&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="leveldb/db/db_test.cc" line="189"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;dbname_&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;dbname_&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="leveldb/db/fault_injection_test.cc" line="374"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class FaultInjectionTest&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class FaultInjectionTest&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="leveldb/db/fault_injection_test.cc" line="359"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;FileState&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;FileState&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/db/fault_injection_test.cc" line="90"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;filename&apos; should be passed by reference." verbose="Parameter &apos;filename&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="leveldb/db/fault_injection_test.cc" line="37"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class LogTest&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class LogTest&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="leveldb/db/log_test.cc" line="39"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;dbname_&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;dbname_&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="leveldb/db/recovery_test.cc" line="21"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Repairer&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Repairer&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="leveldb/db/repair.cc" line="45"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;==&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="leveldb/db/skiplist_test.cc" line="163"/>
            <location file="leveldb/db/skiplist_test.cc" line="163"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LevelFileNumIterator::value_buf_&apos; is not initialized in the constructor." verbose="Member variable &apos;LevelFileNumIterator::value_buf_&apos; is not initialized in the constructor.">
            <location file="leveldb/db/version_set.cc" line="156"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::start_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::start_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_sqlite3.cc" line="315"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::last_op_finish_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::last_op_finish_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_sqlite3.cc" line="315"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::done_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::done_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_sqlite3.cc" line="315"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::next_report_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::next_report_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_sqlite3.cc" line="315"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::db_num_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::db_num_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_tree_db.cc" line="291"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::start_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::start_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_tree_db.cc" line="291"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::last_op_finish_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::last_op_finish_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_tree_db.cc" line="291"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::done_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::done_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_tree_db.cc" line="291"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Benchmark::next_report_&apos; is not initialized in the constructor." verbose="Member variable &apos;Benchmark::next_report_&apos; is not initialized in the constructor.">
            <location file="leveldb/doc/bench/db_bench_tree_db.cc" line="291"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;WritableFileImpl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;WritableFileImpl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/helpers/memenv/memenv.cc" line="205"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EmptyIterator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EmptyIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/table/iterator.cc" line="44"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;STLLessThan&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;STLLessThan&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/table/table_test.cc" line="83"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringSource&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringSource&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/table/table_test.cc" line="112"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TableConstructor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TableConstructor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="leveldb/table/table_test.cc" line="223"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LRUCache::capacity_&apos; is not initialized in the constructor." verbose="Member variable &apos;LRUCache::capacity_&apos; is not initialized in the constructor.">
            <location file="leveldb/util/cache.cc" line="200"/>
        </error>
        <error id="readdirCalled" severity="portability" msg="Non reentrant function &apos;readdir&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;readdir_r&apos;." verbose="Non reentrant function &apos;readdir&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;readdir_r&apos;.">
            <location file="leveldb/util/env_posix.cc" line="378"/>
        </error>
        <error id="usleepCalled" severity="style" msg="Obsolescent function &apos;usleep&apos; called. It is recommended to use &apos;nanosleep&apos; or &apos;setitimer&apos; instead." verbose="The obsolescent function &apos;usleep&apos; is called. POSIX.1-2001 declares usleep() function obsolescent and POSIX.1-2008 removes it. It is recommended that new applications use the &apos;nanosleep&apos; or &apos;setitimer&apos; function.">
            <location file="leveldb/util/env_posix.cc" line="506"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="main.cpp" line="488"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;txInMap&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;txInMap&apos; is reassigned a value before the old one has been used.">
            <location file="main.cpp" line="2816"/>
            <location file="main.cpp" line="2815"/>
        </error>
        <error id="duplicateExpressionTernary" severity="style" msg="Same expression in both branches of ternary operator." verbose="Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition.">
            <location file="main.cpp" line="2543"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dFreeCount&apos; can be reduced." verbose="The scope of the variable &apos;dFreeCount&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.cpp" line="700"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nLastTime&apos; can be reduced." verbose="The scope of the variable &apos;nLastTime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.cpp" line="701"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nFees&apos; can be reduced." verbose="The scope of the variable &apos;nFees&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.cpp" line="1382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nonce&apos; can be reduced." verbose="The scope of the variable &apos;nonce&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.cpp" line="3614"/>
        </error>
        <error id="uselessCallsRemove" severity="warning" msg="Return value of std::remove() ignored. Elements remain in container." verbose="The return value of std::remove() is ignored. This function returns an iterator to the end of the range containing those elements that should be kept. Elements past new end remain valid but with unspecified values. Use the erase method of the container to delete them.">
            <location file="main.cpp" line="775"/>
        </error>
        <error id="uselessCallsRemove" severity="warning" msg="Return value of std::remove() ignored. Elements remain in container." verbose="The return value of std::remove() is ignored. This function returns an iterator to the end of the range containing those elements that should be kept. Elements past new end remain valid but with unspecified values. Use the erase method of the container to delete them.">
            <location file="main.cpp" line="796"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="main.cpp" line="3524"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite conditions in nested &apos;if&apos; blocks lead to a dead code block." verbose="Opposite conditions in nested &apos;if&apos; blocks lead to a dead code block.">
            <location file="miner.cpp" line="346"/>
            <location file="miner.cpp" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nFees&apos; can be reduced." verbose="The scope of the variable &apos;nFees&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="miner.cpp" line="172"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;COrphan&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;COrphan&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="miner.cpp" line="65"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TxPriorityCompare&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TxPriorityCompare&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="miner.cpp" line="91"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;&quot;mempool transaction missing input&quot;==0&apos; is always false" verbose="Condition &apos;&quot;mempool transaction missing input&quot;==0&apos; is always false">
            <location file="miner.cpp" line="207"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PAGESIZE&apos; since the value of &apos;PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="main.cpp" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PRIO_THREAD&apos; since the value of &apos;PRIO_THREAD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="main.cpp" line="1"/>
        </error>
